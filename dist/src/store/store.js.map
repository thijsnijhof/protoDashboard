{"version":3,"sources":["../../../src/store/store.js"],"names":["Vue","use","Vuex","store","Store","state","isLoggedIn","accessToken","data","singleDevice","singleDeviceData","settingsArray","usrArray","selectedSet","singleSetting","plugins","storage","getItem","Cookies","get","key","setItem","value","set","expires","secure","removeItem","remove","mutations","authUser","userData","token","console","log","authChecked","logoutUser","changeSet","selected","addDevices","newData","device","particle","Particle","getVariable","deviceId","name","auth","then","deviceCSV","body","result","deviceData","split","combinedArray","selectedArray","indexOf","push","editSingleSetting","changedVal","arg","fnPr","callFunction","argument","err","saveAllSettings","allSettings","csvArray","map","a","join","getters","actions","login","authData","commit","username","password","res","access_token","router","catch","error","logout","fetchDevices","listDevices","devices","selectedDevice","editSetting","saveSettings","selectSet"],"mappings":"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","file":"store.js","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport Cookies from 'js-cookie';\nimport createPersistedState from 'vuex-persistedstate';\nimport router from '../router';\nimport settingsArray from './settingsArray';\nimport usrArray from './usrArray';\n\n// Export const store to have access to it outside of this file\n// We can access this in other files by using $store\n\n// Use the Vuex module with Vue\n// We can now create a new store by using new Vuex.Store({...etc})\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n    // The initial state of the application\n    isLoggedIn: false,\n    accessToken: null,\n    data: {},\n    singleDevice: {},\n    singleDeviceData: [],\n    settingsArray,\n    usrArray,\n    selectedSet:'MSTRSet',\n    singleSetting:[]\n  },\n  plugins: [\n    // persist the accessToken to localStorage\n    // https://github.com/robinvdvleuten/vuex-persistedstate\n    createPersistedState({\n      storage: {\n        getItem: key => Cookies.get(key),\n        setItem: (key, value) => Cookies.set(key, value, {expires: 7, secure: false}),\n        removeItem: key => Cookies.remove(key)\n      }\n    })\n  ],\n  mutations: {\n    authUser(state, userData) {\n      // Store the accessToken in the store\n      // The userData is provided by the login action below\n      state.accessToken = userData.token;\n      state.isLoggedIn = true;\n      console.log(userData.token);\n    },\n    authChecked(state){\n      state.isLoggedIn = true;\n    },\n    logoutUser(state, accessToken) {\n      Cookies.remove('accessToken', 'userId', 'token');\n      state.isLoggedIn = false;\n      state.accessToken='';\n      console.log(accessToken);\n    },\n    changeSet(state,selected){\n      console.log('selected', selected);\n      state.selectedSet = selected;\n      console.log(state.selectedSet);\n    },\n    addDevices(state, newData) {\n      // Store the data from the devices in the store\n      // The newData is provided by the fetchDevices action\n      state.data = newData;\n      console.log('state data ', state.data);\n    },\n    singleDevice(state, device) {\n      // This mutation is called by selectedDevice upon selecting a device in the Home component.\n      // It retrieves the data for the selected device by taking the deviceId from the store.\n      // We can then use the particle getVariable method to retrieve the data\n      state.singleDevice = device;\n      const particle = new Particle();\n      particle.getVariable({\n        deviceId: state.singleDevice,\n        name: `get${state.selectedSet}`,\n        // name: `getMSTRSet`,\n        auth: state.accessToken\n      })\n        .then(data => {\n          // After calling the getVariable method we get the response from the API on body.result\n          // The result returned by the device is a CSV string.\n          // The split method splits string objects into an array of strings\n          // We can define where we want the method to split the CSV string into substrings by passing in a string argument\n          // The CSV string is a string with comma's between each word so: \"str1,str2,str3,etc...\"\n          // Using (\",\") a comma as the argument will create a new substring between each word\n          let deviceCSV = data.body.result;\n          console.log('devicecsv: ', deviceCSV);\n          let deviceData = deviceCSV.split(\",\");\n          // To output the list on the Dashboard I want to have an array of objects\n          // I made a second array which matches the array key names of the devices\n          // The deviceData array has all the values. I will create a new array and combine it into an array of objects\n          // This way I can set the values of each property and list them with name and value\n          let combinedArray = [];\n          let selectedArray = state.selectedSet === 'MSTRSet' ? settingsArray : usrArray;\n          // for (let result in deviceData) {\n          //   let key = settingsArray.indexOf(settingsArray[result]);\n          //   combinedArray.push({name: settingsArray[result], value: deviceData[result], key:key});\n          // }\n\n          for (let result in deviceData) {\n            let key = selectedArray.indexOf(selectedArray[result]);\n            combinedArray.push({name: selectedArray[result], value: deviceData[result], key:key});\n          }\n\n          // Set the state to the combinedArray so we can access the values in the Dashboard component\n          state.singleDeviceData = combinedArray;\n          console.log('CombinedArray after is: ', combinedArray);\n        });\n    },\n    editSingleSetting(state,changedVal) {\n      // Takes the edited setting and put it in the combinedArray\n      // Prev function\n      //   let newSettings = state.singleDeviceData;\n      //   newSettings[changedVal.key] = {name:changedVal.name,value:changedVal.value,key:changedVal.key};\n      //   console.log('new: ',newSettings);\n      //   state.singleSetting = newSettings;\n      //   console.log('singleSetting: ',state.singleSetting);\n      const particle = new Particle();\n      const arg = `${changedVal.key}:${changedVal.value}`;\n      const fnPr = particle.callFunction({\n        deviceId:state.singleDevice,\n        name:`set${state.selectedSet}`,\n        // name:'setMSTRSet',\n        argument:arg,\n        auth:state.accessToken\n      });\n\n      fnPr.then(\n        function(data) {\n          console.log('Function called succesfully:', data);\n        }, function(err) {\n          console.log('An error occurred:', err);\n        });\n\n    },\n    saveAllSettings(state) {\n      console.log('SaveAllSettings fired!...')\n      const particle = new Particle();\n      // Takes the final new array of objects\n      const allSettings = state.singleSetting;\n      // Convert it to a new CSV string\n      let csvArray = allSettings.map(a => a.value).join(\",\");\n      console.log('csvarray: ',csvArray);\n      // Call the setMSTRset function from the particle API\n      // It takes the deviceId, name of the called function, an argument and the accessToken\n      const fnPr = particle.callFunction({\n        deviceId:state.singleDevice,\n        name:'setMSTRSet',\n        argument:csvArray,\n        auth:state.accessToken\n      });\n\n      fnPr.then(\n        function(data) {\n          console.log('Function called succesfully:', data);\n        }, function(err) {\n          console.log('An error occurred:', err);\n        });\n    }\n  },\n  getters: {\n    // The getters can be listened to in other components\n    // When the state changes, the state in the components changes as well\n    // Getters do not change any values, this is done with mutations, they simply return values\n    data: state => {\n      return state.data;\n    },\n    singleDevice: state => {\n      return state.singleDevice;\n    },\n    singleDeviceData: state => {\n      return state.singleDeviceData;\n    },\n    isLoggedIn: state => {\n      return state.isLoggedIn;\n    },\n    selectedSet: state => {\n      return state.selectedSet;\n    }\n  },\n  actions: {\n    // AuthData = payload\n    // Commit, commits the context to the mutation\n    // The mutation then changes the state\n    login({commit}, authData) {\n      const particle = new Particle();\n      particle.login({\n        username: authData.username,\n        password: authData.password\n      })\n      // commit the authUser mutation\n        .then(res => {\n          console.log(\"res: \", res.body);\n          commit('authUser', {\n            token: res.body.access_token\n          });\n          router.push('/home')\n        })\n        // catch errors\n        .catch(error => console.log('failed to login', error))\n    },\n    // checkLogin(state){\n    //   console.log(state.accessToken)\n    //   if(state.accessToken !== ''){\n    //     console.log('AccessToken exists, logging in...');\n    //     router.push('/home')\n    //   } else {\n    //     router.push('/')\n    //   }\n    // },\n    logout({commit}, accessToken) {\n      commit('logoutUser', accessToken);\n      router.push('/')\n    },\n    // Retrieve the devices from the particle account.\n    // The action is fired when the Home component is created.\n    fetchDevices({commit}) {\n      const particle = new Particle();\n      const accessToken = this.state.accessToken;\n      // listDevices is a method from the particle API.\n      // It takes the accesstoken from the store\n      // The accesstoken is provided by the API upon logging in\n      particle.listDevices({auth: accessToken})\n        .then(devices => {\n          console.log('Devices', devices);\n          commit('addDevices', devices.body);\n        })\n        .catch(error => console.log('List devices failed ', error))\n    },\n    // Action to select a device\n    // This action is dispatched from the Home component upon selecting a device.\n    selectedDevice({commit}, device) {\n      console.log('storeSelectedDevice: ',device)\n      commit('singleDevice', device);\n      router.push('/dashboard');\n    },\n    editSetting({commit}, changedVal) {\n      // Action to edit a single setting in the singleDeviceData\n      console.log('storeEditSetting: ',changedVal);\n      commit('editSingleSetting', changedVal);\n    },\n    // Action to save updated settings\n    // saveSettings is dispatched from the Dashboard component.\n    saveSettings({commit}) {\n        commit('saveAllSettings');\n    },\n    selectSet({commit}, selected){\n        commit('changeSet', selected);\n    }\n  }\n});\n"]}