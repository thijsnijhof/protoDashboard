{"version":3,"sources":["../../../src/store/store.js"],"names":["Vue","use","Vuex","store","Store","state","isLoggedIn","accessToken","data","singleDevice","singleDeviceData","usrArray","settingsArray","selectedSet","singleSetting","plugins","storage","getItem","Cookies","get","key","setItem","value","set","expires","secure","removeItem","remove","mutations","authUser","userData","token","authChecked","logoutUser","changeSet","selected","addDevices","newData","device","particle","Particle","getVariable","deviceId","name","auth","then","deviceCSV","body","result","deviceData","split","pop","combinedArray","selectedArray","indexOf","push","replace","editSingleSetting","changedVal","arg","fnPr","callFunction","argument","console","log","err","saveAllSettings","allSettings","csvArray","map","a","join","getters","actions","login","authData","commit","username","password","res","access_token","router","catch","error","logout","fetchDevices","listDevices","devices","selectedDevice","editSetting","saveSettings","selectSet"],"mappings":"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","file":"store.js","sourcesContent":["import Vue from 'vue';\nimport Vuex from 'vuex';\nimport Cookies from 'js-cookie';\nimport createPersistedState from 'vuex-persistedstate';\nimport router from '../router';\nimport settingsArray from './settingsArray';\nimport usrArray from './usrArray';\n\n// Export const store to have access to it outside of this file\n// We can access this in other files by using $store\n\n// Use the Vuex module with Vue\n// We can now create a new store by using new Vuex.Store({...etc})\nVue.use(Vuex);\n\nexport const store = new Vuex.Store({\n  state: {\n    // The initial state of the application\n    isLoggedIn: false,\n    accessToken: null,\n    data: {},\n    singleDevice: {},\n    singleDeviceData: [],\n    usrArray,\n    settingsArray,\n    selectedSet:'MSTRSet',\n    singleSetting:[]\n  },\n  plugins: [\n    // persist the accessToken to localStorage\n    // https://github.com/robinvdvleuten/vuex-persistedstate\n    createPersistedState({\n      storage: {\n        getItem: key => Cookies.get(key),\n        setItem: (key, value) => Cookies.set(key, value, {expires: 7, secure: false}),\n        removeItem: key => Cookies.remove(key)\n      }\n    })\n  ],\n  mutations: {\n    authUser(state, userData) {\n      // Store the accessToken in the store\n      // The userData is provided by the login action below\n      state.accessToken = userData.token;\n      state.isLoggedIn = true;\n    },\n    authChecked(state){\n      state.isLoggedIn = true;\n    },\n    logoutUser(state, accessToken) {\n      Cookies.remove('accessToken', 'userId', 'token');\n      state.isLoggedIn = false;\n      state.accessToken='';\n    },\n    changeSet(state,selected){\n      state.selectedSet = selected;\n    },\n    addDevices(state, newData) {\n      // Store the data from the devices in the store\n      // The newData is provided by the fetchDevices action\n      state.data = newData;\n    },\n    singleDevice(state, device) {\n      // This mutation is called by selectedDevice upon selecting a device in the Home component.\n      // It retrieves the data for the selected device by taking the deviceId from the store.\n      // We can then use the particle getVariable method to retrieve the data\n      state.singleDevice = device;\n      const particle = new Particle();\n      particle.getVariable({\n        deviceId: state.singleDevice,\n        name: `get${state.selectedSet}`,\n        auth: state.accessToken\n      })\n        .then(data => {\n          // After calling the getVariable method we get the response from the API on body.result\n          // The result returned by the device is a CSV string.\n          // The split method splits string objects into an array of strings\n          // We can define where we want the method to split the CSV string into substrings by passing in a string argument\n          // The CSV string is a string with comma's between each word so: \"str1,str2,str3,etc...\"\n          // Using (\",\") a comma as the argument will create a new substring between each word\n          let deviceCSV = data.body.result;\n          let deviceData = deviceCSV.split(\",\");\n          deviceData.pop();\n          // To output the list on the Dashboard I want to have an array of objects\n          // I made a second array which matches the array key names of the devices\n          // The deviceData array has all the values. I will create a new array and combine it into an array of objects\n          // This way I can set the values of each property and list them with name and value\n          let combinedArray = [];\n          let selectedArray = state.selectedSet === 'MSTRSet' ? settingsArray : usrArray;\n          for (let result in deviceData) {\n            let key = selectedArray.indexOf(selectedArray[result]);\n            combinedArray.push({name: selectedArray[result], value: deviceData[result].replace(/\"/g,''), key:key});\n          }\n\n          // Set the state to the combinedArray so we can access the values in the Dashboard component\n          state.singleDeviceData = combinedArray;\n        });\n    },\n    editSingleSetting(state,changedVal) {\n      // Takes the edited setting and put it in the combinedArray\n      const particle = new Particle();\n      const arg = `${changedVal.key}:${changedVal.value}`;\n      const fnPr = particle.callFunction({\n        deviceId:state.singleDevice,\n        name:`set${state.selectedSet}`,\n        argument:arg,\n        auth:state.accessToken\n      });\n\n      fnPr.then(\n        function(data) {\n          console.log('Function called succesfully:', data);\n        }, function(err) {\n          console.log('An error occurred:', err);\n        });\n\n    },\n    saveAllSettings(state) {\n      const particle = new Particle();\n      // Takes the final new array of objects\n      const allSettings = state.singleSetting;\n      // Convert it to a new CSV string\n      let csvArray = allSettings.map(a => a.value).join(\",\");\n      // Call the setMSTRset function from the particle API\n      // It takes the deviceId, name of the called function, an argument and the accessToken\n      const fnPr = particle.callFunction({\n        deviceId:state.singleDevice,\n        name:'setMSTRSet',\n        argument:csvArray,\n        auth:state.accessToken\n      });\n\n      fnPr.then(\n        function(data) {\n          console.log('Function called succesfully:', data);\n        }, function(err) {\n          console.log('An error occurred:', err);\n        });\n    }\n  },\n  getters: {\n    // The getters can be listened to in other components\n    // When the state changes, the state in the components changes as well\n    // Getters do not change any values, this is done with mutations, they simply return values\n    data: state => {\n      return state.data;\n    },\n    singleDevice: state => {\n      return state.singleDevice;\n    },\n    singleDeviceData: state => {\n      return state.singleDeviceData;\n    },\n    isLoggedIn: state => {\n      return state.isLoggedIn;\n    },\n    selectedSet: state => {\n      return state.selectedSet;\n    }\n  },\n  actions: {\n    // AuthData = payload\n    // Commit, commits the context to the mutation\n    // The mutation then changes the state\n    login({commit}, authData) {\n      const particle = new Particle();\n      particle.login({\n        username: authData.username,\n        password: authData.password\n      })\n      // commit the authUser mutation\n        .then(res => {\n          commit('authUser', {\n            token: res.body.access_token\n          });\n          router.push('/home')\n        })\n        // catch errors\n        .catch(error => console.log('failed to login', error))\n    },\n    logout({commit}, accessToken) {\n      commit('logoutUser', accessToken);\n      router.push('/')\n    },\n    // Retrieve the devices from the particle account.\n    // The action is fired when the Home component is created.\n    fetchDevices({commit}) {\n      const particle = new Particle();\n      const accessToken = this.state.accessToken;\n      // listDevices is a method from the particle API.\n      // It takes the accesstoken from the store\n      // The accesstoken is provided by the API upon logging in\n      particle.listDevices({auth: accessToken})\n        .then(devices => {\n          commit('addDevices', devices.body);\n        })\n        .catch(error => console.log('List devices failed ', error))\n    },\n    // Action to select a device\n    // This action is dispatched from the Home component upon selecting a device.\n    selectedDevice({commit}, device) {\n      commit('singleDevice', device);\n      router.push('/dashboard');\n    },\n    editSetting({commit}, changedVal) {\n      // Action to edit a single setting in the singleDeviceData\n      commit('editSingleSetting', changedVal);\n    },\n    // Action to save updated settings\n    // saveSettings is dispatched from the Dashboard component.\n    saveSettings({commit}) {\n        commit('saveAllSettings');\n    },\n    selectSet({commit, state}, selected){\n        commit('changeSet', selected,state);\n\n    }\n  }\n});\n"]}