{"version":3,"sources":["../../build/utils.js"],"names":["path","require","config","ExtractTextPlugin","pkg","exports","assetsPath","_path","assetsSubDirectory","process","env","NODE_ENV","build","dev","posix","join","cssLoaders","options","cssLoader","loader","sourceMap","postcssLoader","generateLoaders","loaderOptions","loaders","usePostCSS","push","extract","use","fallback","concat","css","postcss","less","sass","indentedSyntax","scss","stylus","styl","styleLoaders","output","extension","test","RegExp","createNotifierCallback","notifier","severity","errors","error","filename","file","split","pop","notify","title","name","message","subtitle","icon","__dirname"],"mappings":"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","file":"utils.js","sourcesContent":["// 'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst pkg = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  var postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  // generate loader string to be used with extract text plugin\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n    // Extract CSS when that option is specified\n    // (which is the case during production build)\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n  // https://vue-loader.vuejs.org/en/configurations/extract-css.html\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n// Generate loaders for standalone style files (outside of .vue)\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n  return output\n}\n\nexports.createNotifierCallback = function () {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') {\n      return\n    }\n    const error = errors[0]\n\n    const filename = error.file && error.file.split('!').pop()\n    notifier.notify({\n      title: pkg.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n"]}